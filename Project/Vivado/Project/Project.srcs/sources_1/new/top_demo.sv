`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 01/15/2021 06:40:11 PM
// Design Name: 
// Module Name: top_demo
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module top_demo
(
  // input
  input  logic [7:0] sw,
  input  logic [3:0] btn,
  input  logic       sysclk_125mhz,
  input  logic       rst,
  
  // output  
  output logic [7:0] led,
  output logic       sseg_ca,
  output logic       sseg_cb,
  output logic       sseg_cc,
  output logic       sseg_cd,
  output logic       sseg_ce,
  output logic       sseg_cf,
  output logic       sseg_cg,
  output logic       sseg_dp,
  output logic [3:0] sseg_an,
  output logic [2:0] hdmi_d_p,  
  output logic [2:0] hdmi_d_n,   
  output logic       hdmi_clk_p,   
  output logic	     hdmi_clk_n,
   
  inout logic	     hdmi_cec,  
  inout logic	     hdmi_sda,   
  inout logic	     hdmi_scl,   
  input logic	     hdmi_hpd
);

  logic [16:0] CURRENT_COUNT;
  logic [16:0] NEXT_COUNT;
  logic        smol_clk;
   
  // Place Conway Game of Life instantiation here
  //logic [255:0] initialState;
  //logic [255:0] grid;
  //logic [255:0] grid_evolve;
  //logic reset;
  //assign initialState = 256'h0412_6424_0034_3C28_0412_6424_0034_3C28_0412_6424_0034_3C28_0412_6424_0034_3C28;
  //assign reset = btn[0];
  //if(reset == 1){
  
  logic clk;
  logic [575:0] ffout, initial_seed;
  logic run, reset;
  logic [23:0] alive, dead;
  
  //want to do switch case for initial_seed, but for now:
  //assign initial_seed = 256'h0000e00000;
  assign run = sw[7];
  assign reset = btn[0];
   
  always @(*) begin
  case (sw[1:0])
    //2'b00 : initial_seed = 576'b
    2'b00 : initial_seed = 576'b
    2'b01 : initial_seed = 576'b
    2'b10 : initial_seed = 576'b
    2'b11 : initial_seed = 576'b
  endcase
  end
  
  always @(*) begin
  case (sw[3:2])
    //blue & teal
    2'b00 : begin alive = {8'h00, 8'h00, 8'hFF};
            dead = {8'h74, 8'hFF, 8'hB3}; end
    //red & green
    2'b01 : begin alive = {8'h56, 8'h99, 8'h4D};
            dead = {8'hCD, 8'h30, 8'h19}; end
    //orange & blue
    2'b10 : begin alive = {8'hFF, 8'hA9, 8'h0D};
            dead = {8'h0D, 8'h48, 8'hFF}; end
    //green & pink
    2'b11 : begin alive = {8'hFF, 8'h45, 8'hD4};
            dead = {8'h37, 8'hFF, 8'h0B}; end
  endcase
  end
   
  clk_div clock(sysclk_125mhz, reset, clk);
  datapath data(clk, ffout, initial_seed, run, reset);

  // HDMI
  // logic hdmi_out_en;
  //assign hdmi_out_en = 1'b0;
  hdmi_top test (alive, dead, ffout, sysclk_125mhz, hdmi_d_p, hdmi_d_n, hdmi_clk_p, 
		         hdmi_clk_n, hdmi_cec, hdmi_sda, hdmi_scl, hdmi_hpd);
  
  // 7-segment display
  segment_driver driver(
  .clk(smol_clk),
  .rst(btn[3]),
  .digit0(sw[3:0]),
  .digit1(4'b0111),
  .digit2(sw[7:4]),
  .digit3(4'b1111),
  .decimals({1'b0, btn[2:0]}),
  .segment_cathodes({sseg_dp, sseg_cg, sseg_cf, sseg_ce, sseg_cd, sseg_cc, sseg_cb, sseg_ca}),
  .digit_anodes(sseg_an)
  );

// Register logic storing clock counts
  always@(posedge sysclk_125mhz)
  begin
    if(btn[3])
      CURRENT_COUNT = 17'h00000;
    else
      CURRENT_COUNT = NEXT_COUNT;
  end
  
  // Increment logic
  assign NEXT_COUNT = CURRENT_COUNT == 17'd100000 ? 17'h00000 : CURRENT_COUNT + 1;

  // Creation of smaller clock signal from counters
  assign smol_clk = CURRENT_COUNT == 17'd100000 ? 1'b1 : 1'b0;

endmodule
//clock divider
module clk_div (input logic clk, input logic rst, output logic clk_en);
logic [23:0] clk_count;
always_ff @(posedge clk)
//posedge defines a rising edge (transition from 0 to 1)
begin
if (rst)
clk_count <= 24'h0;
else
clk_count <= clk_count + 1;
end
assign clk_en = clk_count[23];
endmodule

